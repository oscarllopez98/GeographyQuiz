package edu.uga.cs.geographyquiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

/** Class that allows the user to indirectly interact with Geography Questions in the database*/
public class GeographyQuestionData {

    //Private members
    private SQLiteDatabase db;
    private SQLiteOpenHelper geographyQuestionsDbHelper;
    private String[] allColumns = {GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_ID,
    GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_CONTINENT, GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_COUNTRY};

    /**
     * Constructor
     * @param context The context in which to set the instance */
    public GeographyQuestionData(Context context){
        this.geographyQuestionsDbHelper = GeographyQuizDBHelper.getInstance(context);
    }

    /**
     * Method for opening the database connection*/
    public void open(){
        db = geographyQuestionsDbHelper.getWritableDatabase();
    }

    /**
     * Method for closing the database connection*/
    public void close(){
        if (geographyQuestionsDbHelper != null){
            geographyQuestionsDbHelper.close();
        }
    }

    /**
     * Method for storing a Geography Question in the database
     * @param geographyQuestion The question to be stored into the database
     * @return geographyQuestion The geography question with an updated id field*/
    public GeographyQuestion storeGeographyQuestion(GeographyQuestion geographyQuestion){

        ContentValues values = new ContentValues();

        values.put(GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_CONTINENT, geographyQuestion.getContinent());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_COUNTRY, geographyQuestion.getCountry());

        //Insert the new row into the database table
        //The id Primary Key will be automatically generated by the database system
        long id = db.insert(GeographyQuizDBHelper.TABLE_GEOGRAPHYQUESTIONS, null, values);

        //Store the id in the geography quiz instance, as it is now persistent
        geographyQuestion.setId(id);

        return geographyQuestion;
    }

    /**
     * Method for retrieving a list of all geography questions
     * @return geographyQuestions The list of all geography questions in the database*/
    public List<GeographyQuestion> retrieveGeographyQuestions(){

        //Start reading from database
        db = geographyQuestionsDbHelper.getReadableDatabase();

        //ArrayList of geography questions
        ArrayList<GeographyQuestion> geographyQuestions = new ArrayList<>();
        Cursor cursor = null;

        cursor = db.query(GeographyQuizDBHelper.TABLE_GEOGRAPHYQUESTIONS, allColumns, null, null, null, null, null);
        while (cursor.moveToNext()){
            //Query the values from one row, iterating over each row
            long id = cursor.getLong(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_ID));
            String continent = cursor.getString(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_CONTINENT));
            String country = cursor.getString(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUESTIONS_COLUMN_COUNTRY));

            //Create Geography Question object with current values
            GeographyQuestion geographyQuestion = new GeographyQuestion(continent,country);
            geographyQuestion.setId(id);

            //Append current row's data to the ArrayList
            geographyQuestions.add(geographyQuestion);
        }

        //Close cursor and return List of geography questions
        cursor.close();
        return geographyQuestions;
    }

    /**
     * Method that returns a Quiz Question by its id key
     * @param id The integer value to search a geography question for*/
    public GeographyQuestion retrieveById(int id){
        try {
            //Start reading from database
            db = geographyQuestionsDbHelper.getReadableDatabase();
            Cursor cursor = null;
            cursor = db.rawQuery("SELECT id,continent,country FROM geographyquestions WHERE id="+id,null);

            if (cursor.moveToFirst()){

                GeographyQuestion geographyQuestion = new GeographyQuestion();
                //Set question's ID
                geographyQuestion.setId(Integer.parseInt(cursor.getString(0)));
                //Set continent from index 1
                geographyQuestion.setContinent(cursor.getString(1));
                //Set country from index 2
                geographyQuestion.setCountry(cursor.getString(2));

                cursor.close();
                return  geographyQuestion;
            }

            //If nothing was found, return null
            return null;
        }catch (Exception e){
            Log.d("GEOG_QUES",e.toString());
            return null;
        }
    }



}
