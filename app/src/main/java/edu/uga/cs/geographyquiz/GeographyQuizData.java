package edu.uga.cs.geographyquiz;

import android.annotation.TargetApi;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Build;
import android.util.Log;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/**
 * Class that allows the user to indirectly interact with Geography Quizzes in the database*/
public class GeographyQuizData {

    //Private members
    private Context context;
    private SQLiteDatabase db;
    private SQLiteOpenHelper geographyQuizzesDbHelper;
    private String[] allColumns = {GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_ID,
    GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION1, GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION2,
            GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION3, GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION4,
            GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION5, GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION6,
            GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_COMPLETED, GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_SCORE,
            GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_DATE
    };

    //Constructor
    public GeographyQuizData(Context context){
        this.geographyQuizzesDbHelper = GeographyQuizDBHelper.getInstance(context);
        this.context = context;
    }

    //Open the database connection
    public void open(){
        db = geographyQuizzesDbHelper.getWritableDatabase();
    }

    //Close the database connection
    public void close(){
        if (geographyQuizzesDbHelper != null){
            geographyQuizzesDbHelper.close();
        }
    }

    //Method for storing a Geography Quiz into the database
    public GeographyQuiz storeGeographyQuiz(GeographyQuiz geographyQuiz){

        ContentValues values = new ContentValues();

        //Put values into corresponding columns
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION1, geographyQuiz.getQuestion_1());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION2, geographyQuiz.getQuestion_2());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION3, geographyQuiz.getQuestion_3());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION4, geographyQuiz.getQuestion_4());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION5, geographyQuiz.getQuestion_5());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION6, geographyQuiz.getQuestion_6());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_SCORE, geographyQuiz.getScore());
        values.put(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_DATE, geographyQuiz.getDate());

        //Insert the new row into the database table
        //The id Primary Key will be automatically generated by the database system
        long id = db.insert(GeographyQuizDBHelper.TABLE_GEOGRAPHYQUIZZES, null, values);

        //Store the id in the geography quiz instance, as it is now persistent
        geographyQuiz.setId(id);

        return geographyQuiz;
    }

    //Method for retrieving all geography quizzes from the database
    public List<GeographyQuiz> retrieveGeographyQuizzes(){
        ArrayList<GeographyQuiz> geographyQuizzes = new ArrayList<>();
        Cursor cursor = null;

        db = geographyQuizzesDbHelper.getReadableDatabase();
        cursor = db.query(GeographyQuizDBHelper.TABLE_GEOGRAPHYQUIZZES, allColumns, null, null, null, null, null);
        while (cursor.moveToNext()){
            //Query the values from one row, iterating over each row
            long id = cursor.getLong(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_ID));
            int question_1 = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION1));
            int question_2 = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION2));
            int question_3 = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION3));
            int question_4 = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION4));
            int question_5 = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION5));
            int question_6 = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_QUESTION6));
            int completed = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_COMPLETED));
            int score = cursor.getInt(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_SCORE));
            String date = cursor.getString(cursor.getColumnIndex(GeographyQuizDBHelper.GEOGRAPHYQUIZZES_COLUMN_DATE));

            //Create Geography Quiz object with current values
            GeographyQuiz geographyQuiz = new GeographyQuiz(question_1,question_2,question_3,
                    question_4,question_5,question_6);
            geographyQuiz.setId(id);
            geographyQuiz.setCompleted(completed);
            geographyQuiz.setScore(score);

            //Append current row's data to the ArrayList
            geographyQuizzes.add(geographyQuiz);
        }

        cursor.close();
        return geographyQuizzes;
    }

    /**
     * Method for retrieving a Geography Quiz by using the quiz's ID value
     * @param id The integer value representation of {geographyQuiz's} ID*/
    @TargetApi(Build.VERSION_CODES.M)
    public GeographyQuiz retrieveById(int id){
        try {

            //Get readable database
            db = geographyQuizzesDbHelper.getReadableDatabase();

            Cursor cursor = null;
            cursor = db.rawQuery("SELECT id,q1,q2,q3,q4,q5,q6,completed,score,date FROM geographyquizzes WHERE id="+id,null);

            //Quiz to return to the user
            GeographyQuiz geographyQuiz = new GeographyQuiz();
            while (cursor.moveToNext()){

                //Set quiz id
                geographyQuiz.setId(cursor.getInt(0));
                //Set quiz question references
                geographyQuiz.setQuestion_1(cursor.getInt(1));
                geographyQuiz.setQuestion_2(cursor.getInt(2));
                geographyQuiz.setQuestion_3(cursor.getInt(3));
                geographyQuiz.setQuestion_4(cursor.getInt(4));
                geographyQuiz.setQuestion_5(cursor.getInt(5));
                geographyQuiz.setQuestion_6(cursor.getInt(6));
                //Set number of completed questions for quiz
                geographyQuiz.setCompleted(cursor.getInt(7));
                //Set current score for quiz
                geographyQuiz.setScore(cursor.getInt(8));
                //Set date for quiz
                LocalDate date = LocalDate.parse(cursor.getString(9));
                geographyQuiz.setDate(date);

                cursor.close();
                return geographyQuiz;
            }

            return null;
        }catch (Exception e){
            Log.d("GEOG_QUIZ",e.toString());
            return null;
        }
    }

    /**
     * Method that generates and returns a quiz with unique countries
     * @return geographyQuiz The unique, randomly generated quiz to return to the user*/
    public GeographyQuiz generateQuiz(){

        GeographyQuestionData questionData = new GeographyQuestionData(context);

        //Retrieve a list of ALL the questions from the database
        List<GeographyQuestion> questionList = questionData.retrieveGeographyQuestions();
        GeographyQuiz quiz = new GeographyQuiz();
        //While quiz is not unique, keep trying to find unique combination of random countries for questions
        boolean keepGoing = true;
        while (keepGoing){
            //Get a random id to check
            int random = (int) (Math.random() * questionList.size() + 1);
            //If the question is not in the quiz yet, add it
            if ((!hasQuestion(quiz, (int) random))){
                quiz.setQuestion_1(random);
            }

            //Get a random id to check
            random = (int) (Math.random() * questionList.size() + 1);
            //If the question is not in the quiz yet, add it
            if ((!hasQuestion(quiz, (int) random))){
                quiz.setQuestion_2(random);
            }

            //Get a random id to check
            random = (int) (Math.random() * questionList.size() + 1);
            //If the question is not in the quiz yet, add it
            if ((!hasQuestion(quiz, (int) random))) {
                quiz.setQuestion_3(random);
            }

            //Get a random id to check
            random = (int) (Math.random() * questionList.size() + 1);
            //If the question is not in the quiz yet, add it
            if ((!hasQuestion(quiz, (int) random))) {
                quiz.setQuestion_4(random);
            }

            //Get a random id to check
            random = (int) (Math.random() * questionList.size() + 1);
            //If the question is not in the quiz yet, add it
            if ((!hasQuestion(quiz, (int) random))) {
                quiz.setQuestion_5(random);
            }

            //Get a random id to check
            random = (int) (Math.random() * questionList.size() + 1);
            //If the question is not in the quiz yet, add it
            if ((!hasQuestion(quiz, (int) random))){
                quiz.setQuestion_6(random);
            }

            //If the quiz is unique, break and return it, otherwise continuing generating random questions
            if (isUnique(quiz)){
                break;
            }
        }
        //Store quiz
        this.storeGeographyQuiz(quiz);
        return quiz;
    }

    /**
     * Method for checking if a quiz possesses a specfic question by using that question's id
     * @param quiz The Geography Quiz to check
     * @param questionId The Geography Question to check if it is in {quiz}
     * return True If the questsion's id appears in the quiz
     * return False Otherwise*/
    private boolean hasQuestion(GeographyQuiz quiz, long questionId){
        if (questionId == quiz.getQuestion_1() || questionId == quiz.getQuestion_2() ||
                questionId == quiz.getQuestion_3() || questionId == quiz.getQuestion_4() ||
                questionId == quiz.getQuestion_5() || questionId == quiz.getQuestion_6()){
            return true;
        }
        return false;
    }

    /**
     * Method that checks if {quiz} has no duplicate question ids (duplicate answers)
     * @param quiz The Geography Quiz to validate for uniqueness
     * @return True if there are no duplicate questions
     * @return False otherwise*/
    private boolean isUnique(GeographyQuiz quiz){
        List<Integer> questionList = new LinkedList<>();
        questionList.add((int)quiz.getQuestion_1());
        if (questionList.contains(quiz.getQuestion_2())) return false;
        questionList.add((int)quiz.getQuestion_2());
        if (questionList.contains(quiz.getQuestion_3())) return false;
        questionList.add((int)quiz.getQuestion_3());
        if (questionList.contains(quiz.getQuestion_4())) return false;
        questionList.add((int)quiz.getQuestion_4());
        if (questionList.contains(quiz.getQuestion_5())) return false;
        questionList.add((int)quiz.getQuestion_5());
        if (questionList.contains(quiz.getQuestion_6())) return false;
        questionList.add((int)quiz.getQuestion_6());

        return true;
    }

    /**
     * Method that returns an integer array, including the original parameter value, that contains unique
     * question ids, making it easier to product entire question pages and options
     * @param id The integer value representing the id for the correct answer for the question*/
    public int[] addRandomCountries(int id){
        int[] randomCountries = new int[4];
        boolean keepGoing = true;

        GeographyQuestionData questionData = new GeographyQuestionData(this.context);
        List<GeographyQuestion> questionList = questionData.retrieveGeographyQuestions();
        int size = questionList.size();

        //Keep looping until random, unique numbers are successfully generated
        while (keepGoing){
            //Generate random questions from all Geography Questions
            int randomNum1 = (int)(Math.random() * size + 1);
            int randomNum2 = (int)(Math.random() * size + 1);
            int randomNum3 = (int)(Math.random() * size + 1);
            int randomNum4 = (int)(Math.random() * size + 1);

            //Check if numbers are unique, continue if not unique, otherwise set values into array
            if (randomNum2 == randomNum1) continue;
            else if (randomNum3 == randomNum2 || randomNum3 == randomNum1) continue;
            else if (randomNum4 == randomNum3 || randomNum4 == randomNum2 || randomNum4 == randomNum1) continue;
            else {
                randomCountries[0] = id;
                randomCountries[1] = randomNum1;
                randomCountries[2] = randomNum2;
                randomCountries[3] = randomNum4;
                //Return integer array with original id value and other unique question id values
                return randomCountries;
            }
        }

        //Return null to appease the Java gods
        return null;
    }
}
